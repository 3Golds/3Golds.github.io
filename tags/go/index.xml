<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>go on 赵鑫的博客</title>
    <link>https://zhaox.xyz/tags/go/</link>
    <description>Recent content in go on 赵鑫的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 14 Dec 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://zhaox.xyz/tags/go/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Golang 常量</title>
      <link>https://zhaox.xyz/posts/golang-%E5%B8%B8%E9%87%8F/</link>
      <pubDate>Thu, 14 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://zhaox.xyz/posts/golang-%E5%B8%B8%E9%87%8F/</guid>
      <description> 在 Go 语言中，常量是指编译期间就已知且不可改变的值。常量可以是数值类型(包括整数、浮点数和负数类型)、布尔类型、字符串类型等。
常量定义 通过 const 关键字定义，有以下三种方式
 const v int = 8989 const fu = 0.2 const ( long int64 = 2048 size = -1 )  预定义常量 Go 语言预定义了一些常量：true、false 和 iota。其中 iota 比较特殊，可以被认为是一个可被编译器修改的常量，在第一个 const 关键字出现时被重置为 0，然后在下一个 const 出现之前，每出现一次 iota，其所代表的数字会自动增 1，我们看一个例子。
 const ( c0 = iota // iota被重设为0 c1 = iota // c1 = 1 c2 // c2 = 2 )  </description>
    </item>
    
    <item>
      <title>Golang 流程控制语句(for、if、else、switch)</title>
      <link>https://zhaox.xyz/posts/golang%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5-for-if-else-switch/</link>
      <pubDate>Thu, 14 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://zhaox.xyz/posts/golang%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5-for-if-else-switch/</guid>
      <description>for 循环 在 Go 中，只有一种循环结构 &amp;mdash;&amp;gt; for循环
基本的for循环包含三个由分号分开的组成部分：
 初始化语句：在第一次循环执行前被执行
 循环条件表达式：每轮迭代开始前被求值
 后置语句：每轮迭代后被执行
  初始化语句一般是一个短变量声明，这里声明的变量仅在整个for循环语句可见。
如果条件表达式的值变为false，那么迭代将终止。
注意：不像 C，Java，或者 Javascript 等其他语言，for 语句的三个组成部分 并不需要用括号括起来，但循环体必须用 { } 括起来。
package main import &amp;quot;fmt&amp;quot; func main() { sum := 0 for i := 0; i &amp;lt; 10; i++ { sum += i } fmt.Println(sum) }  for 的另一种格式 循环初始化语句和后置语句都是可选的
package main import &amp;quot;fmt&amp;quot; func main() { sum := 1 for ; sum &amp;lt; 1000; { sum += sum } fmt.</description>
    </item>
    
    <item>
      <title>Golang 常量</title>
      <link>https://zhaox.xyz/posts/%E5%88%9D%E8%AF%86golang/</link>
      <pubDate>Tue, 05 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://zhaox.xyz/posts/%E5%88%9D%E8%AF%86golang/</guid>
      <description>Go 介绍 Go 是一种开源编程语言，可以轻松构建简单，可靠和高效的软件。
Go 是 Google 开发的一种静态强类型、编译型、并发型，并具有垃圾回收功能的编程语言。为了方便搜索和识别，有时会将其称为 Golang。
罗伯特·格瑞史莫，罗勃·派克（Rob Pike）及肯·汤普逊于 2007 年 9 月开始设计 Go 语言，稍后 Ian Lance Taylor、Russ Cox 加入项目。Go 语言是基于 Inferno 操作系统所开发的。Go 语言于 2009 年 11 月正式宣布推出，成为开放源代码项目，并在 Linux 及 Mac OS X 平台上进行了实现，后来追加了 Windows 系统下的实现。
受欢迎程度 截止目前为止，越来越多的开发者开始使用 GO，并喜欢用 Go，目前在 Github 统计中，Go 排名第 9
最受欢迎的 5 种语言和最想使用的语言之一 来源: https://insights.stackoverflow.com/survey/2017#most-loved-dreaded-and-wanted
Go 是云基础架构语言 每个云计算公司都在用 Go 实现云基础架构关键组件，包括 Google Cloud, AWS, Microsoft Azure, DigitalOcean, Heroku。Go 是阿里巴巴，cloudflare 和 Drobox 等云计算公司的重要组成部分
Go 开源软件的影响力 Go 有很多出色的开源软件，并且很流行，举几个常见并且正在用的例子</description>
    </item>
    
    <item>
      <title>Golang 数组和切片</title>
      <link>https://zhaox.xyz/posts/2017-12-14-golang-%E6%95%B0%E7%BB%84%E5%92%8C%E5%88%87%E7%89%87/</link>
      <pubDate>Sat, 07 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://zhaox.xyz/posts/2017-12-14-golang-%E6%95%B0%E7%BB%84%E5%92%8C%E5%88%87%E7%89%87/</guid>
      <description>一、数组类型 数组是 Go 语言编程中最常用的数据结构之一。顾名思义，数组就是指一系列同一类型数据 的集合。数组中包含的每个数据被称为数组元素(element)，一个数组包含的元素个数被称为数 组的长度。
1.定义 var 变量名 [len]type
 var a[5] int var a[5]string var a[15]bool  2.元素访问 可以使用数组下标来访问数组中的元素。与 C 语言相同，数组下标从 0 开始，len(array)-1 则表示最后一个元素的下标。下面的示例遍历整型数组并逐个打印元素内容:
 var a[5]int var b = [2]int {1,2} fmt.Printf(&amp;quot;%v %v %v\n&amp;quot;,a, b, b[1]) Output: [0 0 0 0 0] [1 2] 2  3.值类型 需要特别注意的是，在 Go 语言中数组是一个值类型( value type)。所有的值类型变量在赋值和作为参数传递时都将产生一次复制动作。如果将数组做为函数的从参数类型，则在函数调用时该参数将发生数据复制。因此，在函数体中无法修改传入的数组的内容，因为函数内操作的只是所传入数组的一个副本。
 $ vim main.go package main import ( &amp;quot;fmt&amp;quot; ) func modify(array [5]int) { array[0] = 100 fmt.</description>
    </item>
    
  </channel>
</rss>